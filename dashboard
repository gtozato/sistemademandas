import React, { useState } from 'react';

const DashboardDemandas = () => {
  // Dados
  const produtos = ['Cybersegurança', 'Contabilidade Fiscal', 'Marketing', 'Investimento', 'Estratégia', 'App mesa de negócio'];
  const etapas = ['Backlog', 'Em análise', 'Em desenvolvimento', 'Em teste', 'Concluído'];
  
  // Estados
  const [demandas, setDemandas] = useState([
    { id: 1, titulo: 'Implementar autenticação de dois fatores', produto: 'Cybersegurança', etapa: 'Em desenvolvimento', dataPrevisao: '2025-03-15' },
    { id: 2, titulo: 'Atualizar relatórios fiscais', produto: 'Contabilidade Fiscal', etapa: 'Em teste', dataPrevisao: '2025-03-20' },
    { id: 3, titulo: 'Campanha nova de marketing digital', produto: 'Marketing', etapa: 'Backlog', dataPrevisao: '2025-04-10' },
    { id: 4, titulo: 'Otimizar interface do app', produto: 'App mesa de negócio', etapa: 'Em análise', dataPrevisao: '2025-03-29' },
    { id: 5, titulo: 'Implementar nova solução antivírus', produto: 'Cybersegurança', etapa: 'Backlog', dataPrevisao: '2025-04-05' },
    { id: 6, titulo: 'Atualizar política de investimentos', produto: 'Investimento', etapa: 'Em desenvolvimento', dataPrevisao: '2025-03-18' }
  ]);
  const [produtoFiltrado, setProdutoFiltrado] = useState('');
  const [mostrarCalendario, setMostrarCalendario] = useState(false);
  const [mostrarFormulario, setMostrarFormulario] = useState(false);
  const [mostrarDetalhes, setMostrarDetalhes] = useState(null);
  const [modoEdicao, setModoEdicao] = useState(false);
  const [demandaEmEdicao, setDemandaEmEdicao] = useState(null);
  const [novaDemanda, setNovaDemanda] = useState({
    titulo: '',
    produto: '',
    etapa: 'Backlog',
    descricao: '',
    dataPrevisao: ''
  });
  
  // Função para mover uma demanda para outra etapa
  const moverDemanda = (id, novaEtapa) => {
    setDemandas(demandas.map(demanda => 
      demanda.id === id ? {...demanda, etapa: novaEtapa} : demanda
    ));
  };
  
  // Função para excluir uma demanda
  const excluirDemanda = (id) => {
    setDemandas(demandas.filter(demanda => demanda.id !== id));
  };
  
  // Função para iniciar a edição de uma demanda
  const iniciarEdicao = (id) => {
    const demanda = demandas.find(d => d.id === id);
    if (demanda) {
      setDemandaEmEdicao({...demanda});
      setModoEdicao(true);
    }
  };
  
  // Função para salvar a edição de uma demanda
  const salvarEdicao = () => {
    if (!demandaEmEdicao) return;
    
    setDemandas(demandas.map(d => 
      d.id === demandaEmEdicao.id ? {...demandaEmEdicao} : d
    ));
    
    setModoEdicao(false);
    setDemandaEmEdicao(null);
    setMostrarDetalhes(null);
  };
  
  // Função para cancelar a edição
  const cancelarEdicao = () => {
    setModoEdicao(false);
    setDemandaEmEdicao(null);
  };
  
  // Função para adicionar uma nova demanda
  const adicionarDemanda = () => {
    if (!novaDemanda.titulo || !novaDemanda.produto) {
      alert('Por favor, preencha pelo menos o título e selecione o produto.');
      return;
    }
    
    // Gerar um novo ID (encontrando o maior ID atual e adicionando 1)
    const novoId = Math.max(0, ...demandas.map(d => d.id)) + 1;
    
    // Adicionar a nova demanda ao estado
    setDemandas([
      ...demandas,
      { ...novaDemanda, id: novoId }
    ]);
    
    // Limpar o formulário
    setNovaDemanda({
      titulo: '',
      produto: '',
      etapa: 'Backlog',
      descricao: '',
      dataPrevisao: ''
    });
    
    // Fechar o modal do formulário
    setMostrarFormulario(false);
  };
  
  // Função para verificar prazo
  function verificarPrazo(dataPrevisao) {
    if (!dataPrevisao) return { status: 'sem-prazo', texto: 'Sem prazo' };
    
    const hoje = new Date();
    const dataLimite = new Date(dataPrevisao);
    const diferencaDias = Math.ceil((dataLimite - hoje) / (1000 * 60 * 60 * 24));
    
    if (diferencaDias < 0) {
      return { status: 'atrasada', texto: `Atrasada (${Math.abs(diferencaDias)} dias)` };
    } else if (diferencaDias <= 3) {
      return { status: 'urgente', texto: `Urgente (${diferencaDias} dias)` };
    } else if (diferencaDias <= 7) {
      return { status: 'proxima', texto: `Próxima (${diferencaDias} dias)` };
    } else {
      return { status: 'em-dia', texto: `${diferencaDias} dias restantes` };
    }
  }
  
  // Gerar dias do mês
  function gerarDiasDoMes() {
    const hoje = new Date();
    const ano = hoje.getFullYear();
    const mes = hoje.getMonth();
    
    const primeiroDia = new Date(ano, mes, 1);
    const ultimoDia = new Date(ano, mes + 1, 0);
    
    const diasDoMes = [];
    const diasDaSemana = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'];
    
    // Adicionar dias vazios para alinhar com o dia da semana correto
    for (let i = 0; i < primeiroDia.getDay(); i++) {
      diasDoMes.push({ dia: '', data: null });
    }
    
    // Adicionar os dias do mês
    for (let dia = 1; dia <= ultimoDia.getDate(); dia++) {
      const dataFormatada = new Date(ano, mes, dia).toISOString().split('T')[0];
      diasDoMes.push({ 
        dia, 
        diaSemana: diasDaSemana[new Date(ano, mes, dia).getDay()],
        data: dataFormatada,
        hoje: dia === hoje.getDate()
      });
    }
    
    return diasDoMes;
  }
  
  // Filtrar demandas
  const demandasFiltradas = produtoFiltrado 
    ? demandas.filter(d => d.produto === produtoFiltrado)
    : demandas;
  
  // Agrupar por etapa
  const demandasPorEtapa = {};
  etapas.forEach(etapa => {
    demandasPorEtapa[etapa] = demandasFiltradas.filter(d => d.etapa === etapa);
  });
  
  // Contagem por produto
  const contagemPorProduto = {};
  produtos.forEach(produto => {
    contagemPorProduto[produto] = demandas.filter(d => d.produto === produto).length;
  });

  return (
    <div className="min-h-screen bg-gray-50 p-4">
      <h1 className="text-2xl font-bold text-indigo-600 mb-4">Dashboard de Demandas</h1>
      
      {/* Filtros e Ações */}
      <div className="mb-6 flex flex-wrap gap-2">
        <select 
          className="border p-2 rounded"
          value={produtoFiltrado}
          onChange={(e) => setProdutoFiltrado(e.target.value)}
        >
          <option value="">Todos os Produtos</option>
          {produtos.map(produto => (
            <option key={produto} value={produto}>{produto}</option>
          ))}
        </select>
        
        <button
          className="bg-green-600 text-white p-2 rounded hover:bg-green-700"
          onClick={() => setMostrarFormulario(true)}
        >
          Adicionar Card
        </button>
        
        <button
          className="bg-indigo-600 text-white p-2 rounded hover:bg-indigo-700"
          onClick={() => setMostrarCalendario(!mostrarCalendario)}
        >
          {mostrarCalendario ? 'Ocultar Calendário' : 'Ver Calendário'}
        </button>
      </div>
      
      {/* Modal de Formulário para Nova Demanda */}
      {mostrarFormulario && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white p-4 rounded-lg shadow-lg w-full max-w-md">
            <h2 className="text-lg font-bold mb-4">Nova Demanda</h2>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm mb-1">Título da Demanda *</label>
                <input
                  type="text"
                  className="w-full p-2 border rounded"
                  value={novaDemanda.titulo}
                  onChange={(e) => setNovaDemanda({...novaDemanda, titulo: e.target.value})}
                  placeholder="Digite o título"
                />
              </div>
              
              <div>
                <label className="block text-sm mb-1">Produto *</label>
                <select
                  className="w-full p-2 border rounded"
                  value={novaDemanda.produto}
                  onChange={(e) => setNovaDemanda({...novaDemanda, produto: e.target.value})}
                >
                  <option value="">Selecione um produto</option>
                  {produtos.map(produto => (
                    <option key={produto} value={produto}>{produto}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm mb-1">Data de Previsão</label>
                <input
                  type="date"
                  className="w-full p-2 border rounded"
                  value={novaDemanda.dataPrevisao}
                  onChange={(e) => setNovaDemanda({...novaDemanda, dataPrevisao: e.target.value})}
                />
              </div>
              
              <div>
                <label className="block text-sm mb-1">Descrição</label>
                <textarea
                  className="w-full p-2 border rounded h-24"
                  value={novaDemanda.descricao}
                  onChange={(e) => setNovaDemanda({...novaDemanda, descricao: e.target.value})}
                  placeholder="Descreva a demanda"
                />
              </div>
            </div>
            
            <div className="mt-4 flex justify-end gap-2">
              <button
                className="px-3 py-1 bg-gray-200 rounded"
                onClick={() => setMostrarFormulario(false)}
              >
                Cancelar
              </button>
              <button
                className="px-3 py-1 bg-green-600 text-white rounded"
                onClick={adicionarDemanda}
              >
                Adicionar
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Modal de Detalhes da Demanda */}
      {mostrarDetalhes && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white p-4 rounded-lg shadow-lg w-full max-w-lg max-h-screen overflow-y-auto">
            {modoEdicao && demandaEmEdicao ? (
              /* Formulário de Edição */
              <div>
                <div className="flex justify-between items-start mb-3">
                  <h2 className="text-lg font-bold">Editar Demanda</h2>
                  <button 
                    className="text-gray-500 hover:text-gray-700 text-xl"
                    onClick={cancelarEdicao}
                  >
                    ✕
                  </button>
                </div>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm mb-1">Título da Demanda *</label>
                    <input
                      type="text"
                      className="w-full p-2 border rounded"
                      value={demandaEmEdicao.titulo || ''}
                      onChange={(e) => setDemandaEmEdicao({...demandaEmEdicao, titulo: e.target.value})}
                      placeholder="Digite o título"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm mb-1">Produto *</label>
                    <select
                      className="w-full p-2 border rounded"
                      value={demandaEmEdicao.produto || ''}
                      onChange={(e) => setDemandaEmEdicao({...demandaEmEdicao, produto: e.target.value})}
                    >
                      <option value="">Selecione um produto</option>
                      {produtos.map(produto => (
                        <option key={produto} value={produto}>{produto}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm mb-1">Data de Previsão</label>
                    <input
                      type="date"
                      className="w-full p-2 border rounded"
                      value={demandaEmEdicao.dataPrevisao || ''}
                      onChange={(e) => setDemandaEmEdicao({...demandaEmEdicao, dataPrevisao: e.target.value})}
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm mb-1">Descrição</label>
                    <textarea
                      className="w-full p-2 border rounded h-24"
                      value={demandaEmEdicao.descricao || ''}
                      onChange={(e) => setDemandaEmEdicao({...demandaEmEdicao, descricao: e.target.value})}
                      placeholder="Descreva a demanda"
                    />
                  </div>
                </div>
                
                <div className="mt-4 flex justify-end gap-2">
                  <button
                    className="px-3 py-1 bg-gray-200 rounded"
                    onClick={cancelarEdicao}
                  >
                    Cancelar
                  </button>
                  <button
                    className="px-3 py-1 bg-green-600 text-white rounded"
                    onClick={salvarEdicao}
                  >
                    Salvar Alterações
                  </button>
                </div>
              </div>
            ) : (
              /* Visualização de Detalhes */
              demandas.filter(d => d.id === mostrarDetalhes).map(demanda => (
                <div key={demanda.id}>
                  <div className="flex justify-between items-start mb-3">
                    <h2 className="text-lg font-bold">{demanda.titulo}</h2>
                    <button 
                      className="text-gray-500 hover:text-gray-700 text-xl"
                      onClick={() => setMostrarDetalhes(null)}
                    >
                      ✕
                    </button>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-4">
                    <div>
                      <div className="text-sm text-gray-500 font-medium">Produto</div>
                      <div className="text-indigo-600 font-semibold">{demanda.produto}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm text-gray-500 font-medium">Etapa Atual</div>
                      <div className="font-semibold">{demanda.etapa}</div>
                    </div>
                    
                    <div>
                      <div className="text-sm text-gray-500 font-medium">Data de Previsão</div>
                      <div className="font-semibold">
                        {demanda.dataPrevisao || "Não definida"}
                        {demanda.dataPrevisao && (
                          <span className={`ml-2 text-xs px-2 py-0.5 rounded ${
                            verificarPrazo(demanda.dataPrevisao).status === 'atrasada' ? 'bg-red-100 text-red-800' :
                            verificarPrazo(demanda.dataPrevisao).status === 'urgente' ? 'bg-orange-100 text-orange-800' :
                            verificarPrazo(demanda.dataPrevisao).status === 'proxima' ? 'bg-yellow-100 text-yellow-800' :
                            'bg-green-100 text-green-800'
                          }`}>
                            {verificarPrazo(demanda.dataPrevisao).texto}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  {demanda.descricao && (
                    <div className="mb-4">
                      <div className="text-sm text-gray-500 font-medium mb-1">Descrição</div>
                      <div className="bg-gray-50 p-3 rounded text-sm">
                        {demanda.descricao}
                      </div>
                    </div>
                  )}
                  
                  <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-2">
                    <button
                      className="px-3 py-2 bg-red-100 text-red-600 rounded hover:bg-red-200"
                      onClick={() => {
                        excluirDemanda(demanda.id);
                        setMostrarDetalhes(null);
                      }}
                    >
                      Excluir
                    </button>
                    
                    <button
                      className="px-3 py-2 bg-blue-100 text-blue-600 rounded hover:bg-blue-200"
                      onClick={() => iniciarEdicao(demanda.id)}
                    >
                      Editar
                    </button>
                    
                    {demanda.etapa !== 'Concluído' && (
                      <button
                        className="px-3 py-2 bg-indigo-100 text-indigo-600 rounded hover:bg-indigo-200"
                        onClick={() => {
                          moverDemanda(demanda.id, etapas[etapas.indexOf(demanda.etapa) + 1]);
                          setMostrarDetalhes(null);
                        }}
                      >
                        Avançar
                      </button>
                    )}
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      )}
      
      {/* Calendário */}
      {mostrarCalendario && (
        <div className="mb-6 bg-white p-4 rounded shadow">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-bold">Calendário de Entregas</h2>
            <div className="flex flex-col sm:flex-row gap-2 text-sm">
              <div className="text-gray-600 italic text-xs mb-1 sm:hidden">
                Clique em um dia para adicionar demanda
              </div>
              <div className="flex gap-2 flex-wrap">
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-red-500 mr-1"></div>
                  <span>Atrasado</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-orange-500 mr-1"></div>
                  <span>Urgente (≤3 dias)</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-yellow-400 mr-1"></div>
                  <span>Próximo (≤7 dias)</span>
                </div>
                <div className="flex items-center">
                  <div className="w-3 h-3 rounded-full bg-green-500 mr-1"></div>
                  <span>Em dia</span>
                </div>
              </div>
            </div>
          </div>
          <div className="text-gray-600 italic text-sm mb-2 hidden sm:block">
            Clique em um dia para adicionar uma nova demanda
          </div>
          
          <div className="grid grid-cols-7 gap-1">
            {['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sáb'].map(dia => (
              <div key={dia} className="text-center font-bold p-2 bg-gray-100">
                {dia}
              </div>
            ))}
            
            {gerarDiasDoMes().map((diaInfo, index) => {
              // Obter demandas para este dia
              const demandasDoDia = diaInfo.data 
                ? demandas.filter(d => d.dataPrevisao === diaInfo.data)
                : [];
                
              return (
                <div 
                  key={index} 
                  className={`min-h-24 border p-1 ${!diaInfo.dia ? 'bg-gray-50' : diaInfo.hoje ? 'bg-blue-50 border-blue-500' : 'bg-white'}`}
                  onClick={() => {
                    if (diaInfo.data) {
                      setNovaDemanda({...novaDemanda, dataPrevisao: diaInfo.data});
                      setMostrarFormulario(true);
                    }
                  }}
                  style={{ cursor: diaInfo.dia ? 'pointer' : 'default' }}
                >
                  {diaInfo.dia && (
                    <>
                      <div className="text-right text-xs text-gray-500">{diaInfo.diaSemana} {diaInfo.dia}</div>
                      <div className="overflow-y-auto max-h-36">
                        {demandasDoDia.map(demanda => {
                          const prazo = verificarPrazo(demanda.dataPrevisao);
                          return (
                            <div 
                              key={demanda.id} 
                              className={`text-xs p-1 mb-1 rounded truncate ${
                                prazo.status === 'atrasada' ? 'bg-red-100 border-l-4 border-red-500' :
                                prazo.status === 'urgente' ? 'bg-orange-100 border-l-4 border-orange-500' :
                                prazo.status === 'proxima' ? 'bg-yellow-100 border-l-4 border-yellow-400' :
                                'bg-green-100 border-l-4 border-green-500'
                              }`}
                              title={`${demanda.titulo} - ${demanda.produto}`}
                              onClick={(e) => {
                                e.stopPropagation(); // Impedir que o clique afete o calendário
                                setMostrarDetalhes(demanda.id);
                              }}
                            >
                              {demanda.titulo}
                            </div>
                          );
                        })}
                      </div>
                    </>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}
      
      {/* Alerta de Prazos */}
      <div className="mb-6 bg-white p-4 rounded shadow">
        <h2 className="text-xl font-bold mb-4">Monitoramento de Prazos</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {/* Demandas Atrasadas */}
          <div className="border border-red-200 rounded p-3">
            <h3 className="font-bold text-red-700 border-b border-red-200 pb-2 mb-2 flex justify-between">
              Demandas Atrasadas 
              <span className="bg-red-100 text-red-800 px-2 rounded-full">{demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'atrasada').length}</span>
            </h3>
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {demandas
                .filter(d => verificarPrazo(d.dataPrevisao).status === 'atrasada')
                .map(demanda => (
                  <div key={demanda.id} className="text-sm bg-red-50 p-2 rounded flex justify-between">
                    <div>
                      <div className="font-medium">{demanda.titulo}</div>
                      <div className="text-xs text-gray-500">{demanda.produto}</div>
                    </div>
                    <div className="text-xs text-red-600 font-bold">{verificarPrazo(demanda.dataPrevisao).texto}</div>
                  </div>
                ))}
              {demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'atrasada').length === 0 && 
                <div className="text-sm text-gray-500 italic">Nenhuma demanda atrasada</div>
              }
            </div>
          </div>
          
          {/* Demandas Urgentes */}
          <div className="border border-orange-200 rounded p-3">
            <h3 className="font-bold text-orange-700 border-b border-orange-200 pb-2 mb-2 flex justify-between">
              Demandas Urgentes 
              <span className="bg-orange-100 text-orange-800 px-2 rounded-full">{demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'urgente').length}</span>
            </h3>
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {demandas
                .filter(d => verificarPrazo(d.dataPrevisao).status === 'urgente')
                .map(demanda => (
                  <div key={demanda.id} className="text-sm bg-orange-50 p-2 rounded flex justify-between">
                    <div>
                      <div className="font-medium">{demanda.titulo}</div>
                      <div className="text-xs text-gray-500">{demanda.produto}</div>
                    </div>
                    <div className="text-xs text-orange-600 font-bold">{verificarPrazo(demanda.dataPrevisao).texto}</div>
                  </div>
                ))}
              {demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'urgente').length === 0 && 
                <div className="text-sm text-gray-500 italic">Nenhuma demanda urgente</div>
              }
            </div>
          </div>
          
          {/* Demandas Próximas */}
          <div className="border border-yellow-200 rounded p-3">
            <h3 className="font-bold text-yellow-700 border-b border-yellow-200 pb-2 mb-2 flex justify-between">
              Próximas Entregas 
              <span className="bg-yellow-100 text-yellow-800 px-2 rounded-full">{demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'proxima').length}</span>
            </h3>
            <div className="space-y-2 max-h-48 overflow-y-auto">
              {demandas
                .filter(d => verificarPrazo(d.dataPrevisao).status === 'proxima')
                .map(demanda => (
                  <div key={demanda.id} className="text-sm bg-yellow-50 p-2 rounded flex justify-between">
                    <div>
                      <div className="font-medium">{demanda.titulo}</div>
                      <div className="text-xs text-gray-500">{demanda.produto}</div>
                    </div>
                    <div className="text-xs text-yellow-600 font-bold">{verificarPrazo(demanda.dataPrevisao).texto}</div>
                  </div>
                ))}
              {demandas.filter(d => verificarPrazo(d.dataPrevisao).status === 'proxima').length === 0 && 
                <div className="text-sm text-gray-500 italic">Nenhuma entrega próxima</div>
              }
            </div>
          </div>
        </div>
      </div>
      
      {/* Visão por Produto */}
      {!produtoFiltrado && (
        <div className="mb-6 bg-white p-4 rounded shadow">
          <h2 className="text-xl font-bold mb-4">Distribuição por Produto</h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* Lista de produtos */}
            <div className="space-y-2">
              {produtos.map(produto => {
                const total = demandas.length;
                const count = contagemPorProduto[produto];
                const percent = total > 0 ? Math.round((count / total) * 100) : 0;
                
                return (
                  <div 
                    key={produto} 
                    className="p-2 border rounded hover:bg-gray-50 cursor-pointer"
                  >
                    <div className="flex justify-between">
                      <span className="font-medium">{produto}</span>
                      <span>
                        {count} <span className="text-gray-500">({percent}%)</span>
                      </span>
                    </div>
                    <div className="w-full bg-gray-200 h-2 mt-1 rounded-full">
                      <div 
                        className="bg-indigo-600 h-2 rounded-full" 
                        style={{ width: `${percent}%` }}
                      ></div>
                    </div>
                  </div>
                );
              })}
            </div>
            
            {/* Cards */}
            <div className="grid grid-cols-2 gap-3">
              {produtos.map(produto => (
                <div 
                  key={produto} 
                  className="bg-indigo-50 p-3 rounded cursor-pointer hover:bg-indigo-100"
                >
                  <div className="font-bold">{produto}</div>
                  <div className="text-2xl font-bold text-indigo-600">{contagemPorProduto[produto]}</div>
                  <div className="text-sm text-gray-500">demandas</div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}
      
      {/* Visão Kanban */}
      <div>
        <h2 className="text-xl font-bold mb-4">
          {produtoFiltrado ? `Kanban: ${produtoFiltrado}` : 'Visão Kanban'}
          {produtoFiltrado && (
            <button
              className="ml-2 bg-gray-200 px-2 py-1 rounded text-sm"
              onClick={() => setProdutoFiltrado('')}
            >
              Limpar Filtro
            </button>
          )}
        </h2>
        
        <div className="flex overflow-x-auto gap-4 pb-4">
          {etapas.map(etapa => (
            <div key={etapa} className="min-w-64 bg-gray-100 rounded p-2">
              <h3 className="font-bold p-2 flex justify-between">
                {etapa} 
                <span className="bg-gray-200 px-2 rounded-full">{demandasPorEtapa[etapa]?.length || 0}</span>
              </h3>
              
              <div className="space-y-2">
                {demandasPorEtapa[etapa]?.map(demanda => (
                  <div 
                    key={demanda.id} 
                    className="bg-white p-3 rounded shadow hover:shadow-md cursor-pointer transition-all"
                    onClick={() => setMostrarDetalhes(demanda.id)}
                  >
                    <div className="flex justify-between mb-2">
                      <div className="font-semibold">{demanda.titulo}</div>
                      <button 
                        className="bg-red-100 text-red-600 px-2 rounded text-xs"
                        onClick={(e) => {
                          e.stopPropagation(); // Evitar que abra o modal de detalhes
                          excluirDemanda(demanda.id);
                        }}
                      >
                        X
                      </button>
                    </div>
                    
                    {!produtoFiltrado && (
                      <div className="text-sm text-indigo-600 mb-2">{demanda.produto}</div>
                    )}
                    
                    {demanda.descricao && (
                      <div className="text-xs text-gray-600 mb-2 truncate">{demanda.descricao}</div>
                    )}
                    
                    {demanda.dataPrevisao && (
                      <div className={`text-xs px-2 py-1 rounded mb-2 ${
                        verificarPrazo(demanda.dataPrevisao).status === 'atrasada' ? 'bg-red-100 text-red-800' :
                        verificarPrazo(demanda.dataPrevisao).status === 'urgente' ? 'bg-orange-100 text-orange-800' :
                        verificarPrazo(demanda.dataPrevisao).status === 'proxima' ? 'bg-yellow-100 text-yellow-800' :
                        'bg-green-100 text-green-800'
                      }`}>
                        {verificarPrazo(demanda.dataPrevisao).texto}
                      </div>
                    )}
                    
                    <div className="flex gap-1 mt-2">
                      {etapa !== 'Backlog' && (
                        <button 
                          className="bg-gray-100 text-xs px-2 py-1 rounded flex-1"
                          onClick={(e) => {
                            e.stopPropagation(); // Evitar que abra o modal de detalhes
                            moverDemanda(
                              demanda.id, 
                              etapas[etapas.indexOf(etapa) - 1]
                            );
                          }}
                        >
                          ← Anterior
                        </button>
                      )}
                      
                      {etapa !== 'Concluído' && (
                        <button 
                          className="bg-indigo-100 text-xs px-2 py-1 rounded flex-1"
                          onClick={(e) => {
                            e.stopPropagation(); // Evitar que abra o modal de detalhes
                            moverDemanda(
                              demanda.id,
                              etapas[etapas.indexOf(etapa) + 1]
                            );
                          }}
                        >
                          Próxima →
                        </button>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default DashboardDemandas;
